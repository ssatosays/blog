<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev on ssatosays/blog</title><link>https://ssatosays.github.io/blog/categories/dev/</link><description>Recent content in Dev on ssatosays/blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 30 Jul 2023 19:00:00 +0900</lastBuildDate><atom:link href="https://ssatosays.github.io/blog/categories/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitで不要なブランチの削除方法 #13</title><link>https://ssatosays.github.io/blog/posts/2023/07/30-13-git-branch/</link><pubDate>Sun, 30 Jul 2023 19:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/30-13-git-branch/</guid><description>ローカルリポジトリに残ったリモート追跡ブランチを削除する
git fetch --prune ローカルブランチを削除する (そのブランチの変更が他のブランチにマージされていない場合は削除を拒否)
git branch -d &amp;lt;branch-name&amp;gt; ローカルブランチを削除する (強制)
git branch -D &amp;lt;branch-name&amp;gt;</description></item><item><title>100個のセルを動的に作成する #12</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-12-cells/</link><pubDate>Sun, 23 Jul 2023 00:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-12-cells/</guid><description>&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; .container { display: flex; flex-wrap: wrap; width: 500px; text-align: center; } .cell { width: 23px; height: 23px; border: 1px solid black; } .salmon { background-color: salmon; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34; class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; window.onload = function() { var container = document.getElementById(&amp;#39;container&amp;#39;); var coloredCells = [4, 10, 15, 20, 25, 30, 33, 88]; for (var i = 0; i &amp;lt;= 99; i++) { var cell = document.createElement(&amp;#39;div&amp;#39;); cell.</description></item><item><title>フィボナッチ数列を取得する #11</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</link><pubDate>Sun, 23 Jul 2023 00:20:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</guid><description>def fibonacci(n: int = 10): fib_list: list = [] if n &amp;lt;= 0: pass elif n == 1: fib_list = [1] elif n == 2: fib_list = [1, 1] else: fib_list = [1, 1] for i in range(2, n): fib_list.append(fib_list[i - 1] + fib_list[i - 2]) return fib_list if __name__ == &amp;#39;__main__&amp;#39;: print(fibonacci(0)) print(fibonacci(1)) print(fibonacci(2)) print(fibonacci(3)) print(fibonacci()) print(fibonacci(20))</description></item><item><title>.htaccess: サンプルコード #10</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-10-htaccess/</link><pubDate>Sun, 23 Jul 2023 00:10:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-10-htaccess/</guid><description>RewriteEngine On RewriteBase / RewriteCond %{SERVER_PORT} 80 RewriteRule ^(.*)$ http://example.com/$1 [R=301,L] RewriteCond %{SERVER_PORT} 443 RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]</description></item><item><title>数値のリストから連続した範囲を抽出する #9</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</guid><description>def ranges(numbers): if not numbers: return [] result = [] start = numbers[0] for i, num in enumerate(numbers[1:], 1): if num - numbers[i-1] != 1: result.append(str(start) if start == numbers[i-1] else f&amp;#34;{start}~{numbers[i-1]}&amp;#34;) start = num result.append(str(start) if start == numbers[-1] else f&amp;#34;{start}~{numbers[-1]}&amp;#34;) return result numbers = [1, 2, 3, 4, 5, 8, 9, 10, 12, 13] print(ranges(numbers)) # [&amp;#39;1~5&amp;#39;, &amp;#39;8~10&amp;#39;, &amp;#39;12~13&amp;#39;]</description></item><item><title>Parentheses in Programming #8</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-8-parentheses/</link><pubDate>Sat, 22 Jul 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-8-parentheses/</guid><description> Symbol Name () parentheses {} curly brackets, curly braces [] square brackets, brackets</description></item><item><title>Bookmarklet: サンプルコード #7</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-7-bookmarklet/</link><pubDate>Sat, 22 Jul 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-7-bookmarklet/</guid><description>javascript:alert(new Date());void(0); javascript:alert(document.getElementById(&amp;#34;id&amp;#34;).value = &amp;#34;310&amp;#34;;document.getElementById(&amp;#34;name&amp;#34;).value = &amp;#34;sato&amp;#34;;);void(0);</description></item><item><title>List[Tuple]をfilter/lambda関数で抽出する #6</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</link><pubDate>Sat, 22 Jul 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</guid><description>&amp;gt;&amp;gt;&amp;gt; tuple_list = [(1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, True)] &amp;gt;&amp;gt;&amp;gt; r = list(filter(lambda x: x[3], tuple_list)) &amp;gt;&amp;gt;&amp;gt; print(r) [(1, 2, 3, True)]</description></item><item><title>redis-py: Basic Example #5</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</link><pubDate>Fri, 21 Jul 2023 21:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</guid><description>&amp;gt;&amp;gt;&amp;gt; import redis &amp;gt;&amp;gt;&amp;gt; r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) &amp;gt;&amp;gt;&amp;gt; r.set(&amp;#39;mykey&amp;#39;, &amp;#39;myvalue&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) myvalue &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; if r.exists(&amp;#39;mykey&amp;#39;): ... r.delete(&amp;#39;mykey&amp;#39;) ... r.exists(&amp;#39;mykey&amp;#39;) ... 1 0 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value) None &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 1 &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 2 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mycounter&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) 2 &amp;gt;&amp;gt;&amp;gt; r.expire(&amp;#39;mycounter&amp;#39;, 60) True &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 54 &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 51 &amp;gt;&amp;gt;&amp;gt;</description></item><item><title>OpenPyXL: サンプルコード #4</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</link><pubDate>Fri, 21 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</guid><description>from openpyxl import load_workbook filename = &amp;#39;target.xlsx&amp;#39; workbook = load_workbook(filename) worksheet = workbook[&amp;#39;Sheet1&amp;#39;] worksheet[&amp;#39;A1&amp;#39;] = &amp;#39;a&amp;#39; worksheet[&amp;#39;B1&amp;#39;] = &amp;#39;b&amp;#39; worksheet[&amp;#39;C1&amp;#39;] = &amp;#39;c&amp;#39; workbook.save(filename)</description></item><item><title>GitHub Actions: サンプルコード #3</title><link>https://ssatosays.github.io/blog/posts/2023/07/18-3-github-actions/</link><pubDate>Tue, 18 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/18-3-github-actions/</guid><description> .github/workflowsディレクトリに適切な名前のyml/yamlファイルを配置する 以下のサンプルコードではAM06:00(UTC)で定期実行するタスクを定義する name: daily on: schedule: - cron: &amp;#39;00 06 * * *&amp;#39; jobs: daily: name: daily runs-on: ubuntu-latest steps: - name: echo run: |echo &amp;#39;--- date&amp;#39; date echo &amp;#39;--- date&amp;#39;</description></item></channel></rss>