<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev on ssatosays/blog</title><link>https://ssatosays.github.io/blog/categories/dev/</link><description>Recent content in Dev on ssatosays/blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 29 Aug 2023 12:00:00 +0900</lastBuildDate><atom:link href="https://ssatosays.github.io/blog/categories/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>crontabでExcelファイルを定期削除する: サンプルコード #30</title><link>https://ssatosays.github.io/blog/posts/2023/08/29-30-crontab/</link><pubDate>Tue, 29 Aug 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/29-30-crontab/</guid><description>#!/bin/bash echo &amp;#34;05 0 * * * bash ~/remove_excel_files.sh&amp;#34; &amp;gt; ~/tmp.txt sudo crontab -u ec2-user ~/tmp.txt rm -rf ~/tmp.txt #!/bin/bash one_day_ago=$(date --date &amp;#39;1 day ago&amp;#39; &amp;#34;+%Y%m%d&amp;#34;) today=$(date &amp;#34;+%Y%m%d&amp;#34;) files=$(ls ~/ | grep -e .xls$ -e .xlsx$ | grep -v ${one_day_ago} | grep -v ${today}) if [ ! -z &amp;#34;${files}&amp;#34; ]; then rm -rf ${files} fi</description></item><item><title>Hugo Themes #29</title><link>https://ssatosays.github.io/blog/posts/2023/08/20-29-hugo-themes/</link><pubDate>Sun, 20 Aug 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/20-29-hugo-themes/</guid><description>Mainroad https://github.com/Vimux/Mainroad
Ananke https://github.com/theNewDynamic/gohugo-theme-ananke
PaperMod https://github.com/adityatelange/hugo-PaperMod</description></item><item><title>Gitでサブモジュールを管理する #28</title><link>https://ssatosays.github.io/blog/posts/2023/08/13-28-git-submodule/</link><pubDate>Sun, 13 Aug 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/13-28-git-submodule/</guid><description>サブモジュールの追加
git submodule add &amp;lt;sub-repo-url&amp;gt; &amp;lt;dir&amp;gt; サブモジュールの更新
git submodule update --remote --merge サブモジュールを初期化して更新
git submodule update --init --recursive</description></item><item><title>curlコマンドチートシート #27</title><link>https://ssatosays.github.io/blog/posts/2023/08/07-27-curl/</link><pubDate>Mon, 07 Aug 2023 13:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/07-27-curl/</guid><description>GET
curl http://localhost:3000/entry POST
curl -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d '{&amp;quot;Name&amp;quot;:&amp;quot;name&amp;quot;, &amp;quot;Age&amp;quot;:&amp;quot;100&amp;quot;}' http://localhost:3000/entry # 改行あり curl -X POST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -d '{&amp;quot;Name&amp;quot;:&amp;quot;name&amp;quot;, &amp;quot;Age&amp;quot;:&amp;quot;100&amp;quot;}' \ http://localhost:3000/entry PUTなどのその他のHTTPメソッド
curl -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; -d '{&amp;quot;Name&amp;quot;:&amp;quot;name&amp;quot;, &amp;quot;Age&amp;quot;:&amp;quot;100&amp;quot;}' http://localhost:3000/entry ヘッダーの追加
curl -H &amp;quot;Authorization: Bearer YOUR_TOKEN&amp;quot; http://localhost:3000/secure-entry レスポンスヘッダーの表示
curl -i http://localhost:3000/entry</description></item><item><title>dateコマンドで時刻設定する #26</title><link>https://ssatosays.github.io/blog/posts/2023/08/07-26-date/</link><pubDate>Mon, 07 Aug 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/07-26-date/</guid><description>sudo date -s &amp;quot;2023-08-01 10:00:00&amp;quot;</description></item><item><title>npmコマンドチートシート #25</title><link>https://ssatosays.github.io/blog/posts/2023/08/07-25-npm/</link><pubDate>Mon, 07 Aug 2023 12:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/07-25-npm/</guid><description>初期化 &amp;amp; パッケージ作成
npm init npm init -y インストール
npm install &amp;lt;package-name&amp;gt; npm install &amp;lt;package-name&amp;gt; --save-dev npm install -g &amp;lt;package-name&amp;gt; npm install npm i アンインストール
npm uninstall &amp;lt;package-name&amp;gt; list
npm list npm list -g --depth=0 npm info &amp;lt;package-name&amp;gt; スクリプト実行
npm run &amp;lt;script-name&amp;gt; アップデート
npm outdated npm update npm update -g &amp;lt;package-name&amp;gt; その他
npm search &amp;lt;keyword&amp;gt; npm cache clean --force npm config list npm login npm publish</description></item><item><title>Slack のリマインダーの使い方 #24</title><link>https://ssatosays.github.io/blog/posts/2023/08/07-24-how-to-use-reminders-in-slack/</link><pubDate>Mon, 07 Aug 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/07-24-how-to-use-reminders-in-slack/</guid><description>サンプル /remind me &amp;quot;mtg&amp;quot; at 13:50 every weekday</description></item><item><title>Signal Handling in Bash #23</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-23-signal-handling/</link><pubDate>Sun, 06 Aug 2023 16:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-23-signal-handling/</guid><description>使用可能なシグナルの一覧 $ kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX 各キーでのシグナル $ stty -a speed 38400 baud; rows 30; columns 140; line = 0; intr = ^C; quit = ^\; erase = ^?</description></item><item><title>PythonでSMTPメールを送信する #22</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-22-email/</link><pubDate>Sun, 06 Aug 2023 16:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-22-email/</guid><description>import smtplib from email.mime.text import MIMEText def main(from_email, to_email, smtp_server, port, password): message = &amp;#34;message&amp;#34; mime_text = MIMEText(message, &amp;#34;html&amp;#34;) mime_text[&amp;#34;Subject&amp;#34;] = &amp;#34;subject&amp;#34; mime_text[&amp;#34;From&amp;#34;] = from_email mime_text[&amp;#34;To&amp;#34;] = to_email with smtplib.SMTP(smtp_server, port) as server: server.login(from_email, password) server.send_message(mime_text) if __name__ == &amp;#34;__main__&amp;#34;: from_email, to_email = &amp;#34;&amp;#34;, &amp;#34;&amp;#34; smtp_server, port, password = &amp;#34;&amp;#34;, 587, &amp;#34;&amp;#34; main(from_email, to_email, smtp_server, port, password)</description></item><item><title>Shallow vs Deep Copy #21</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-21-shallow-vs-deepcopy/</link><pubDate>Sun, 06 Aug 2023 15:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-21-shallow-vs-deepcopy/</guid><description>import copy orig_dict = { &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;value2&amp;#34;, &amp;#34;key3&amp;#34;: [&amp;#34;value3&amp;#34;, &amp;#34;value4&amp;#34;, &amp;#34;value5&amp;#34;], &amp;#34;key4&amp;#34;: {&amp;#34;subkey&amp;#34;: &amp;#34;subvalue&amp;#34;} } copy_dict = orig_dict orig_dict[&amp;#34;key3&amp;#34;].append(&amp;#34;value6&amp;#34;) print(&amp;#34;orig_dict:&amp;#34;, orig_dict) print(&amp;#34;copy_dict:&amp;#34;, copy_dict) # orig_dict: {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: [&amp;#39;value3&amp;#39;, &amp;#39;value4&amp;#39;, &amp;#39;value5&amp;#39;, &amp;#39;value6&amp;#39;], &amp;#39;key4&amp;#39;: {&amp;#39;subkey&amp;#39;: &amp;#39;subvalue&amp;#39;}} # copy_dict: {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: [&amp;#39;value3&amp;#39;, &amp;#39;value4&amp;#39;, &amp;#39;value5&amp;#39;, &amp;#39;value6&amp;#39;], &amp;#39;key4&amp;#39;: {&amp;#39;subkey&amp;#39;: &amp;#39;subvalue&amp;#39;}} import copy orig_dict = { &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;value2&amp;#34;, &amp;#34;key3&amp;#34;: [&amp;#34;value3&amp;#34;, &amp;#34;value4&amp;#34;, &amp;#34;value5&amp;#34;], &amp;#34;key4&amp;#34;: {&amp;#34;subkey&amp;#34;: &amp;#34;subvalue&amp;#34;} } deep_copy_dict = copy.</description></item><item><title>Pythonでランダム文字列を生成する: サンプルコード #20</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-20-random-strings/</link><pubDate>Sun, 06 Aug 2023 15:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-20-random-strings/</guid><description>import hashlib import os import random import string def generate_random_string(length, chars): return &amp;#39;&amp;#39;.join(random.choice(chars) for _ in range(length)) def func_1(): data = string.digits + string.ascii_lowercase + string.ascii_uppercase return generate_random_string(20, data) def func_2(): result = hashlib.sha256(os.urandom(32)).hexdigest()[:20] return result def func_3(): chars = string.ascii_letters + string.digits + &amp;#39;_&amp;#39; return generate_random_string(20, chars) if __name__ == &amp;#39;__main__&amp;#39;: print(func_1()) print(func_2()) print(func_3())</description></item><item><title>60秒ごとにtracertする: サンプルコード #19</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-19-tracert/</link><pubDate>Sun, 06 Aug 2023 14:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-19-tracert/</guid><description>@echo off setlocal set &amp;#34;TARGET=example.com&amp;#34; set &amp;#34;LOG_FOLDER=logs&amp;#34; set &amp;#34;DELAY_SECONDS=60&amp;#34; If not exist &amp;#34;%LOG_FOLDER%&amp;#34; mkdir &amp;#34;%LOG_FOLDER%&amp;#34; :loop set &amp;#34;CURRENT_TIME=%time: =0%&amp;#34; set &amp;#34;NOW=%date:/=%%CURRENT_TIME:~0,2%%CURRENT_TIME:~3,2%%CURRENT_TIME:~6,2%&amp;#34; tracert &amp;#34;%TARGET%&amp;#34; &amp;gt; &amp;#34;%LOG_FOLDER%\%NOW%.txt&amp;#34; timeout /t %DELAY_SECONDS% /nobreak goto loop</description></item><item><title>LINE Notify API: サンプルコード #18</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</link><pubDate>Sun, 06 Aug 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</guid><description>#!/bin/bash # Configuration readonly TOKEN=&amp;#34;mytoken&amp;#34; readonly MESSAGE=&amp;#34;Hello, LINE Notify!&amp;#34; readonly EP=&amp;#34;https://notify-api.line.me/api/notify&amp;#34; readonly AUTH=&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; readonly CONTENT_TYPE=&amp;#34;Content-Type: application/x-www-form-urlencoded&amp;#34; readonly DATA=&amp;#34;message=${MESSAGE}&amp;#34; # API request curl -X POST -H &amp;#34;${AUTH}&amp;#34; -H &amp;#34;${CONTENT_TYPE}&amp;#34; -d &amp;#34;${DATA}&amp;#34; ${EP} import requests # Configuration token = &amp;#39;mytoken&amp;#39; message = &amp;#39;Hello, LINE Notify!&amp;#39; ep = &amp;#39;https://notify-api.line.me/api/notify&amp;#39; headers = { &amp;#39;Authorization&amp;#39;: f&amp;#39;Bearer {token}&amp;#39;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/x-www-form-urlencoded&amp;#39; } payload = {&amp;#39;message&amp;#39;: message} # API request r = requests.post(ep, headers=headers, data=payload) # Response print(r.</description></item><item><title>FTPファイルアップロードの自動化: サンプルコード #17</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-17-ftp/</link><pubDate>Sun, 06 Aug 2023 13:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-17-ftp/</guid><description>#!/bin/bash # FTP server settings SERVER=&amp;#34;127.0.0.1&amp;#34; PORT=&amp;#34;21&amp;#34; USER=&amp;#34;username&amp;#34; PW=&amp;#34;password&amp;#34; REMOTE_DIR=&amp;#34;/public&amp;#34; # Temporary file TMP_FILE=&amp;#34;tmp&amp;#34; touch $TMP_FILE # FTP command sequence FTP_COMMANDS=$(cat &amp;lt;&amp;lt; EOF open $SERVER $PORT user $USER $PW passive prompt cd $REMOTE_DIR mput $TMP_FILE ls bye EOF ) # Run echo &amp;#34;$FTP_COMMANDS&amp;#34; | ftp -n</description></item><item><title>Bashで引数のハンドルと終了ステータスの取得: サンプルコード #16</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-16-arguments/</link><pubDate>Sun, 06 Aug 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-16-arguments/</guid><description>#!/bin/bash if [ &amp;#34;$#&amp;#34; -ne 3 ]; then echo &amp;#39;Error: The script expects exactly 3 arguments.&amp;#39; exit 1 fi echo &amp;#39;The number of args is 3.&amp;#39; echo $1 echo $2 echo $3 echo &amp;#39;Hello, world.&amp;#39; if [ &amp;#34;$?&amp;#34; -eq 0 ]; then echo &amp;#39;Command succeed.&amp;#39; else echo &amp;#39;Command failed.&amp;#39; fi</description></item><item><title>Bashで実行時間を計測: サンプルコード #15</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-15-during/</link><pubDate>Sun, 06 Aug 2023 12:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-15-during/</guid><description>#!/bin/bash BEGIN=$(date +&amp;#39;%s.%3N&amp;#39;) # work sleep 10 END=$(date +&amp;#39;%s.%3N&amp;#39;) DURING=$(echo &amp;#34;scale=3; ${END}- ${BEGIN}&amp;#34; | bc) echo &amp;#34;BEGIN: ${BEGIN}&amp;#34; echo &amp;#34;END: ${END}&amp;#34; echo &amp;#34;DURING: ${DURING}&amp;#34;</description></item><item><title>ストアドプロシージャ: サンプルコード #14</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-14-storedprocedure/</link><pubDate>Sun, 06 Aug 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-14-storedprocedure/</guid><description>1-1. 作成 DELIMITER // CREATE PROCEDURE SimpleInsert() BEGIN INSERT INTO `students` (`name`, `age`) VALUES (&amp;#39;Taro&amp;#39;, 10); END; DELIMITER ; 1-2. 実行 CALL SimpleInsert(); 1-3. 削除 DROP PROCEDURE SimpleInsert; 2. ループを利用した一括追加 DELIMITER // CREATE PROCEDURE BulkInsert() BEGIN DECLARE i INT DEFAULT 0; WHILE i &amp;lt; 10 DO INSERT INTO `students` (`name`, `age`) VALUES (CONCAT(&amp;#39;Student_&amp;#39;, i), 10 + i); SET i = i + 1; END WHILE; END; DELIMITER ;</description></item><item><title>Gitで不要なブランチの削除方法 #13</title><link>https://ssatosays.github.io/blog/posts/2023/07/30-13-git-branch/</link><pubDate>Sun, 30 Jul 2023 19:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/30-13-git-branch/</guid><description>ローカルリポジトリに残ったリモート追跡ブランチを削除する
git fetch --prune ローカルブランチを削除する (そのブランチの変更が他のブランチにマージされていない場合は削除を拒否)
git branch -d &amp;lt;branch-name&amp;gt; ローカルブランチを削除する (強制)
git branch -D &amp;lt;branch-name&amp;gt;</description></item><item><title>100個のセルを動的に作成する #12</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-12-cells/</link><pubDate>Sun, 23 Jul 2023 00:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-12-cells/</guid><description>&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; .container { display: flex; flex-wrap: wrap; width: 500px; text-align: center; } .cell { width: 23px; height: 23px; border: 1px solid black; } .salmon { background-color: salmon; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34; class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; window.onload = function() { var container = document.getElementById(&amp;#39;container&amp;#39;); var coloredCells = [4, 10, 15, 20, 25, 30, 33, 88]; for (var i = 0; i &amp;lt;= 99; i++) { var cell = document.createElement(&amp;#39;div&amp;#39;); cell.</description></item><item><title>フィボナッチ数列を取得する #11</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</link><pubDate>Sun, 23 Jul 2023 00:20:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</guid><description>def fibonacci(n: int = 10): fib_list: list = [] if n &amp;lt;= 0: pass elif n == 1: fib_list = [1] elif n == 2: fib_list = [1, 1] else: fib_list = [1, 1] for i in range(2, n): fib_list.append(fib_list[i - 1] + fib_list[i - 2]) return fib_list if __name__ == &amp;#39;__main__&amp;#39;: print(fibonacci(0)) print(fibonacci(1)) print(fibonacci(2)) print(fibonacci(3)) print(fibonacci()) print(fibonacci(20))</description></item><item><title>.htaccess: サンプルコード #10</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-10-htaccess/</link><pubDate>Sun, 23 Jul 2023 00:10:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-10-htaccess/</guid><description>RewriteEngine On RewriteBase / RewriteCond %{SERVER_PORT} 80 RewriteRule ^(.*)$ http://example.com/$1 [R=301,L] RewriteCond %{SERVER_PORT} 443 RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]</description></item><item><title>数値のリストから連続した範囲を抽出する #9</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</guid><description>def ranges(numbers): if not numbers: return [] result = [] start = numbers[0] for i, num in enumerate(numbers[1:], 1): if num - numbers[i-1] != 1: result.append(str(start) if start == numbers[i-1] else f&amp;#34;{start}~{numbers[i-1]}&amp;#34;) start = num result.append(str(start) if start == numbers[-1] else f&amp;#34;{start}~{numbers[-1]}&amp;#34;) return result numbers = [1, 2, 3, 4, 5, 8, 9, 10, 12, 13] print(ranges(numbers)) # [&amp;#39;1~5&amp;#39;, &amp;#39;8~10&amp;#39;, &amp;#39;12~13&amp;#39;]</description></item><item><title>Parentheses in Programming #8</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-8-parentheses/</link><pubDate>Sat, 22 Jul 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-8-parentheses/</guid><description> Symbol Name () parentheses {} curly brackets, curly braces [] square brackets, brackets</description></item><item><title>Bookmarklet: サンプルコード #7</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-7-bookmarklet/</link><pubDate>Sat, 22 Jul 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-7-bookmarklet/</guid><description>javascript:alert(new Date());void(0); javascript:alert(document.getElementById(&amp;#34;id&amp;#34;).value = &amp;#34;310&amp;#34;;document.getElementById(&amp;#34;name&amp;#34;).value = &amp;#34;sato&amp;#34;;);void(0);</description></item><item><title>List[Tuple]をfilter/lambda関数で抽出する #6</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</link><pubDate>Sat, 22 Jul 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</guid><description>&amp;gt;&amp;gt;&amp;gt; tuple_list = [(1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, True)] &amp;gt;&amp;gt;&amp;gt; r = list(filter(lambda x: x[3], tuple_list)) &amp;gt;&amp;gt;&amp;gt; print(r) [(1, 2, 3, True)]</description></item><item><title>redis-py: Basic Example #5</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</link><pubDate>Fri, 21 Jul 2023 21:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</guid><description>&amp;gt;&amp;gt;&amp;gt; import redis &amp;gt;&amp;gt;&amp;gt; r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) &amp;gt;&amp;gt;&amp;gt; r.set(&amp;#39;mykey&amp;#39;, &amp;#39;myvalue&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) myvalue &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; if r.exists(&amp;#39;mykey&amp;#39;): ... r.delete(&amp;#39;mykey&amp;#39;) ... r.exists(&amp;#39;mykey&amp;#39;) ... 1 0 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value) None &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 1 &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 2 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mycounter&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) 2 &amp;gt;&amp;gt;&amp;gt; r.expire(&amp;#39;mycounter&amp;#39;, 60) True &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 54 &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 51 &amp;gt;&amp;gt;&amp;gt;</description></item><item><title>OpenPyXL: サンプルコード #4</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</link><pubDate>Fri, 21 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</guid><description>from openpyxl import load_workbook filename = &amp;#39;target.xlsx&amp;#39; workbook = load_workbook(filename) worksheet = workbook[&amp;#39;Sheet1&amp;#39;] worksheet[&amp;#39;A1&amp;#39;] = &amp;#39;a&amp;#39; worksheet[&amp;#39;B1&amp;#39;] = &amp;#39;b&amp;#39; worksheet[&amp;#39;C1&amp;#39;] = &amp;#39;c&amp;#39; workbook.save(filename)</description></item><item><title>GitHub Actions: サンプルコード #3</title><link>https://ssatosays.github.io/blog/posts/2023/07/18-3-github-actions/</link><pubDate>Tue, 18 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/18-3-github-actions/</guid><description> .github/workflowsディレクトリに適切な名前のyml/yamlファイルを配置する 以下のサンプルコードではAM06:00(UTC)で定期実行するタスクを定義する name: daily on: schedule: - cron: &amp;#39;00 06 * * *&amp;#39; jobs: daily: name: daily runs-on: ubuntu-latest steps: - name: echo run: |echo &amp;#39;--- date&amp;#39; date echo &amp;#39;--- date&amp;#39;</description></item></channel></rss>