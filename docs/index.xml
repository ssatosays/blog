<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ssatosays/blog</title><link>https://ssatosays.github.io/blog/</link><description>Recent content on ssatosays/blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Aug 2023 15:30:00 +0900</lastBuildDate><atom:link href="https://ssatosays.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>PythonでSMTPメールを送信する #22</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-22-email/</link><pubDate>Sun, 06 Aug 2023 15:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-22-email/</guid><description>import smtplib from email.mime.text import MIMEText def main(from_email, to_email, smtp_server, port, password): message = &amp;#34;message&amp;#34; mime_text = MIMEText(message, &amp;#34;html&amp;#34;) mime_text[&amp;#34;Subject&amp;#34;] = &amp;#34;subject&amp;#34; mime_text[&amp;#34;From&amp;#34;] = from_email mime_text[&amp;#34;To&amp;#34;] = to_email with smtplib.SMTP(smtp_server, port) as server: server.login(from_email, password) server.send_message(mime_text) if __name__ == &amp;#34;__main__&amp;#34;: from_email, to_email = &amp;#34;&amp;#34;, &amp;#34;&amp;#34; smtp_server, port, password = &amp;#34;&amp;#34;, 587, &amp;#34;&amp;#34; main(from_email, to_email, smtp_server, port, password)</description></item><item><title>Shallow vs Deep Copy #21</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-21-shallow-vs-deepcopy/</link><pubDate>Sun, 06 Aug 2023 15:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-21-shallow-vs-deepcopy/</guid><description>import copy orig_dict = { &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;value2&amp;#34;, &amp;#34;key3&amp;#34;: [&amp;#34;value3&amp;#34;, &amp;#34;value4&amp;#34;, &amp;#34;value5&amp;#34;], &amp;#34;key4&amp;#34;: {&amp;#34;subkey&amp;#34;: &amp;#34;subvalue&amp;#34;} } copy_dict = orig_dict orig_dict[&amp;#34;key3&amp;#34;].append(&amp;#34;value6&amp;#34;) print(&amp;#34;orig_dict:&amp;#34;, orig_dict) print(&amp;#34;copy_dict:&amp;#34;, copy_dict) # orig_dict: {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: [&amp;#39;value3&amp;#39;, &amp;#39;value4&amp;#39;, &amp;#39;value5&amp;#39;, &amp;#39;value6&amp;#39;], &amp;#39;key4&amp;#39;: {&amp;#39;subkey&amp;#39;: &amp;#39;subvalue&amp;#39;}} # copy_dict: {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: [&amp;#39;value3&amp;#39;, &amp;#39;value4&amp;#39;, &amp;#39;value5&amp;#39;, &amp;#39;value6&amp;#39;], &amp;#39;key4&amp;#39;: {&amp;#39;subkey&amp;#39;: &amp;#39;subvalue&amp;#39;}} import copy orig_dict = { &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;value2&amp;#34;, &amp;#34;key3&amp;#34;: [&amp;#34;value3&amp;#34;, &amp;#34;value4&amp;#34;, &amp;#34;value5&amp;#34;], &amp;#34;key4&amp;#34;: {&amp;#34;subkey&amp;#34;: &amp;#34;subvalue&amp;#34;} } deep_copy_dict = copy.</description></item><item><title>Pythonでランダム文字列を生成する: サンプルコード #20</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-20-random-strings/</link><pubDate>Sun, 06 Aug 2023 15:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-20-random-strings/</guid><description>import hashlib import os import random import string def generate_random_string(length, chars): return &amp;#39;&amp;#39;.join(random.choice(chars) for _ in range(length)) def func_1(): data = string.digits + string.ascii_lowercase + string.ascii_uppercase return generate_random_string(20, data) def func_2(): result = hashlib.sha256(os.urandom(32)).hexdigest()[:20] return result def func_3(): chars = string.ascii_letters + string.digits + &amp;#39;_&amp;#39; return generate_random_string(20, chars) if __name__ == &amp;#39;__main__&amp;#39;: print(func_1()) print(func_2()) print(func_3())</description></item><item><title>60秒ごとにtracertする: サンプルコード #19</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-19-tracert/</link><pubDate>Sun, 06 Aug 2023 14:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-19-tracert/</guid><description>@echo off setlocal set &amp;#34;TARGET=example.com&amp;#34; set &amp;#34;LOG_FOLDER=logs&amp;#34; set &amp;#34;DELAY_SECONDS=60&amp;#34; If not exist &amp;#34;%LOG_FOLDER%&amp;#34; mkdir &amp;#34;%LOG_FOLDER%&amp;#34; :loop set &amp;#34;CURRENT_TIME=%time: =0%&amp;#34; set &amp;#34;NOW=%date:/=%%CURRENT_TIME:~0,2%%CURRENT_TIME:~3,2%%CURRENT_TIME:~6,2%&amp;#34; tracert &amp;#34;%TARGET%&amp;#34; &amp;gt; &amp;#34;%LOG_FOLDER%\%NOW%.txt&amp;#34; timeout /t %DELAY_SECONDS% /nobreak goto loop</description></item><item><title>LINE Notify API: サンプルコード #18</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</link><pubDate>Sun, 06 Aug 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</guid><description>#!/bin/bash # Configuration readonly TOKEN=&amp;#34;mytoken&amp;#34; readonly MESSAGE=&amp;#34;Hello, LINE Notify!&amp;#34; readonly EP=&amp;#34;https://notify-api.line.me/api/notify&amp;#34; readonly AUTH=&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; readonly CONTENT_TYPE=&amp;#34;Content-Type: application/x-www-form-urlencoded&amp;#34; readonly DATA=&amp;#34;message=${MESSAGE}&amp;#34; # API request curl -X POST -H &amp;#34;${AUTH}&amp;#34; -H &amp;#34;${CONTENT_TYPE}&amp;#34; -d &amp;#34;${DATA}&amp;#34; ${EP} import requests # Configuration token = &amp;#39;mytoken&amp;#39; message = &amp;#39;Hello, LINE Notify!&amp;#39; ep = &amp;#39;https://notify-api.line.me/api/notify&amp;#39; headers = { &amp;#39;Authorization&amp;#39;: f&amp;#39;Bearer {token}&amp;#39;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/x-www-form-urlencoded&amp;#39; } payload = {&amp;#39;message&amp;#39;: message} # API request r = requests.post(ep, headers=headers, data=payload) # Response print(r.</description></item><item><title>FTPファイルアップロードの自動化: サンプルコード #17</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-17-ftp/</link><pubDate>Sun, 06 Aug 2023 13:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-17-ftp/</guid><description>#!/bin/bash # FTP server settings SERVER=&amp;#34;127.0.0.1&amp;#34; PORT=&amp;#34;21&amp;#34; USER=&amp;#34;username&amp;#34; PW=&amp;#34;password&amp;#34; REMOTE_DIR=&amp;#34;/public&amp;#34; # Temporary file TMP_FILE=&amp;#34;tmp&amp;#34; touch $TMP_FILE # FTP command sequence FTP_COMMANDS=$(cat &amp;lt;&amp;lt; EOF open $SERVER $PORT user $USER $PW passive prompt cd $REMOTE_DIR mput $TMP_FILE ls bye EOF ) # Run echo &amp;#34;$FTP_COMMANDS&amp;#34; | ftp -n</description></item><item><title>Bashで引数のハンドルと終了ステータスの取得: サンプルコード #16</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-16-arguments/</link><pubDate>Sun, 06 Aug 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-16-arguments/</guid><description>#!/bin/bash if [ &amp;#34;$#&amp;#34; -ne 3 ]; then echo &amp;#39;Error: The script expects exactly 3 arguments.&amp;#39; exit 1 fi echo &amp;#39;The number of args is 3.&amp;#39; echo $1 echo $2 echo $3 echo &amp;#39;Hello, world.&amp;#39; if [ &amp;#34;$?&amp;#34; -eq 0 ]; then echo &amp;#39;Command succeed.&amp;#39; else echo &amp;#39;Command failed.&amp;#39; fi</description></item><item><title>Bashで実行時間を計測: サンプルコード #15</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-15-during/</link><pubDate>Sun, 06 Aug 2023 12:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-15-during/</guid><description>#!/bin/bash BEGIN=$(date +&amp;#39;%s.%3N&amp;#39;) # work sleep 10 END=$(date +&amp;#39;%s.%3N&amp;#39;) DURING=$(echo &amp;#34;scale=3; ${END}- ${BEGIN}&amp;#34; | bc) echo &amp;#34;BEGIN: ${BEGIN}&amp;#34; echo &amp;#34;END: ${END}&amp;#34; echo &amp;#34;DURING: ${DURING}&amp;#34;</description></item><item><title>ストアドプロシージャ: サンプルコード #14</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-14-storedprocedure/</link><pubDate>Sun, 06 Aug 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-14-storedprocedure/</guid><description>1-1. 作成 DELIMITER // CREATE PROCEDURE SimpleInsert() BEGIN INSERT INTO `students` (`name`, `age`) VALUES (&amp;#39;Taro&amp;#39;, 10); END; DELIMITER ; 1-2. 実行 CALL SimpleInsert(); 1-3. 削除 DROP PROCEDURE SimpleInsert; 2. ループを利用した一括追加 DELIMITER // CREATE PROCEDURE BulkInsert() BEGIN DECLARE i INT DEFAULT 0; WHILE i &amp;lt; 10 DO INSERT INTO `students` (`name`, `age`) VALUES (CONCAT(&amp;#39;Student_&amp;#39;, i), 10 + i); SET i = i + 1; END WHILE; END; DELIMITER ;</description></item><item><title>Gitで不要なブランチの削除方法 #13</title><link>https://ssatosays.github.io/blog/posts/2023/07/30-13-git-branch/</link><pubDate>Sun, 30 Jul 2023 19:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/30-13-git-branch/</guid><description>ローカルリポジトリに残ったリモート追跡ブランチを削除する
git fetch --prune ローカルブランチを削除する (そのブランチの変更が他のブランチにマージされていない場合は削除を拒否)
git branch -d &amp;lt;branch-name&amp;gt; ローカルブランチを削除する (強制)
git branch -D &amp;lt;branch-name&amp;gt;</description></item><item><title>100個のセルを動的に作成する #12</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-12-cells/</link><pubDate>Sun, 23 Jul 2023 00:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-12-cells/</guid><description>&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style&amp;gt; .container { display: flex; flex-wrap: wrap; width: 500px; text-align: center; } .cell { width: 23px; height: 23px; border: 1px solid black; } .salmon { background-color: salmon; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34; class=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; window.onload = function() { var container = document.getElementById(&amp;#39;container&amp;#39;); var coloredCells = [4, 10, 15, 20, 25, 30, 33, 88]; for (var i = 0; i &amp;lt;= 99; i++) { var cell = document.createElement(&amp;#39;div&amp;#39;); cell.</description></item><item><title>フィボナッチ数列を取得する #11</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</link><pubDate>Sun, 23 Jul 2023 00:20:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</guid><description>def fibonacci(n: int = 10): fib_list: list = [] if n &amp;lt;= 0: pass elif n == 1: fib_list = [1] elif n == 2: fib_list = [1, 1] else: fib_list = [1, 1] for i in range(2, n): fib_list.append(fib_list[i - 1] + fib_list[i - 2]) return fib_list if __name__ == &amp;#39;__main__&amp;#39;: print(fibonacci(0)) print(fibonacci(1)) print(fibonacci(2)) print(fibonacci(3)) print(fibonacci()) print(fibonacci(20))</description></item><item><title>.htaccess: サンプルコード #10</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-10-htaccess/</link><pubDate>Sun, 23 Jul 2023 00:10:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-10-htaccess/</guid><description>RewriteEngine On RewriteBase / RewriteCond %{SERVER_PORT} 80 RewriteRule ^(.*)$ http://example.com/$1 [R=301,L] RewriteCond %{SERVER_PORT} 443 RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]</description></item><item><title>数値のリストから連続した範囲を抽出する #9</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</guid><description>def ranges(numbers): if not numbers: return [] result = [] start = numbers[0] for i, num in enumerate(numbers[1:], 1): if num - numbers[i-1] != 1: result.append(str(start) if start == numbers[i-1] else f&amp;#34;{start}~{numbers[i-1]}&amp;#34;) start = num result.append(str(start) if start == numbers[-1] else f&amp;#34;{start}~{numbers[-1]}&amp;#34;) return result numbers = [1, 2, 3, 4, 5, 8, 9, 10, 12, 13] print(ranges(numbers)) # [&amp;#39;1~5&amp;#39;, &amp;#39;8~10&amp;#39;, &amp;#39;12~13&amp;#39;]</description></item><item><title>Parentheses in Programming #8</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-8-parentheses/</link><pubDate>Sat, 22 Jul 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-8-parentheses/</guid><description> Symbol Name () parentheses {} curly brackets, curly braces [] square brackets, brackets</description></item><item><title>Bookmarklet: サンプルコード #7</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-7-bookmarklet/</link><pubDate>Sat, 22 Jul 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-7-bookmarklet/</guid><description>javascript:alert(new Date());void(0); javascript:alert(document.getElementById(&amp;#34;id&amp;#34;).value = &amp;#34;310&amp;#34;;document.getElementById(&amp;#34;name&amp;#34;).value = &amp;#34;sato&amp;#34;;);void(0);</description></item><item><title>List[Tuple]をfilter/lambda関数で抽出する #6</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</link><pubDate>Sat, 22 Jul 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</guid><description>&amp;gt;&amp;gt;&amp;gt; tuple_list = [(1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, True)] &amp;gt;&amp;gt;&amp;gt; r = list(filter(lambda x: x[3], tuple_list)) &amp;gt;&amp;gt;&amp;gt; print(r) [(1, 2, 3, True)]</description></item><item><title>redis-py: Basic Example #5</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</link><pubDate>Fri, 21 Jul 2023 21:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</guid><description>&amp;gt;&amp;gt;&amp;gt; import redis &amp;gt;&amp;gt;&amp;gt; r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) &amp;gt;&amp;gt;&amp;gt; r.set(&amp;#39;mykey&amp;#39;, &amp;#39;myvalue&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) myvalue &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; if r.exists(&amp;#39;mykey&amp;#39;): ... r.delete(&amp;#39;mykey&amp;#39;) ... r.exists(&amp;#39;mykey&amp;#39;) ... 1 0 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value) None &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 1 &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 2 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mycounter&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) 2 &amp;gt;&amp;gt;&amp;gt; r.expire(&amp;#39;mycounter&amp;#39;, 60) True &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 54 &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 51 &amp;gt;&amp;gt;&amp;gt;</description></item><item><title>OpenPyXL: サンプルコード #4</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</link><pubDate>Fri, 21 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</guid><description>from openpyxl import load_workbook filename = &amp;#39;target.xlsx&amp;#39; workbook = load_workbook(filename) worksheet = workbook[&amp;#39;Sheet1&amp;#39;] worksheet[&amp;#39;A1&amp;#39;] = &amp;#39;a&amp;#39; worksheet[&amp;#39;B1&amp;#39;] = &amp;#39;b&amp;#39; worksheet[&amp;#39;C1&amp;#39;] = &amp;#39;c&amp;#39; workbook.save(filename)</description></item><item><title>GitHub Actions: サンプルコード #3</title><link>https://ssatosays.github.io/blog/posts/2023/07/18-3-github-actions/</link><pubDate>Tue, 18 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/18-3-github-actions/</guid><description> .github/workflowsディレクトリに適切な名前のyml/yamlファイルを配置する 以下のサンプルコードではAM06:00(UTC)で定期実行するタスクを定義する name: daily on: schedule: - cron: &amp;#39;00 06 * * *&amp;#39; jobs: daily: name: daily runs-on: ubuntu-latest steps: - name: echo run: |echo &amp;#39;--- date&amp;#39; date echo &amp;#39;--- date&amp;#39;</description></item><item><title>時速と所要時間の対応表 #2</title><link>https://ssatosays.github.io/blog/posts/2023/07/17-2-timetable/</link><pubDate>Mon, 17 Jul 2023 21:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/17-2-timetable/</guid><description> 時速(Km/h) 1000メートル当たりの時間(mm:ss) 400メートル当たりの時間(mm:ss) 5 12:00 4:48 6 10:00 4:00 7 8:34 3:26 8 7:30 3:00 9 6:40 2:40 10 6:00 2:24 11 5:27 2:11 12 5:00 2:00 13 4:37 1:51 14 4:17 1:43 15 4:00 1:36 16 3:45 1:30 17 3:32 1:25 18 3:20 1:20 19 3:09 1:16 20 3:00 1:12 21 2:51 1:08 22 2:43 1:05 23 2:36 1:02 24 2:30 1:00 25 2:24 0:57 26 2:18 0:55 27 2:13 0:53 28 2:08 0:51 29 2:04 0:49 30 2:00 0:48</description></item><item><title>キャッシュフローが良いとはどのような状態ですか？ #1</title><link>https://ssatosays.github.io/blog/posts/2023/07/17-1-cashflow/</link><pubDate>Mon, 17 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/17-1-cashflow/</guid><description>「キャッシュフローが良い」とは、その運営に必要な現金(キャッシュ)を十分に確保し、適切に管理している状態のこと。
収入とコスト：定期的かつ一貫した収入を得ていて、収入はコストを上回り、余裕を持っている 債務：債務が適切に管理され、支払利息や元本の返済がスムーズに行れている 投資と成長：新規プロジェクトや自己の発展に投資するための十分な現金がある 緊急対応：予期せぬ出費や経済の下降に対応できる現金バッファーがある</description></item><item><title/><link>https://ssatosays.github.io/blog/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ssatosays.github.io/blog/about/</guid><description/></item></channel></rss>