<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash on ssatosays/blog</title><link>https://ssatosays.github.io/blog/tags/bash/</link><description>Recent content in Bash on ssatosays/blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Aug 2023 16:30:00 +0900</lastBuildDate><atom:link href="https://ssatosays.github.io/blog/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>Signal Handling in Bash #23</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-23-signal-handling/</link><pubDate>Sun, 06 Aug 2023 16:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-23-signal-handling/</guid><description>使用可能なシグナルの一覧 $ kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX 各キーでのシグナル $ stty -a speed 38400 baud; rows 30; columns 140; line = 0; intr = ^C; quit = ^\; erase = ^?</description></item><item><title>LINE Notify API: サンプルコード #18</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</link><pubDate>Sun, 06 Aug 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</guid><description>#!/bin/bash # Configuration readonly TOKEN=&amp;#34;mytoken&amp;#34; readonly MESSAGE=&amp;#34;Hello, LINE Notify!&amp;#34; readonly EP=&amp;#34;https://notify-api.line.me/api/notify&amp;#34; readonly AUTH=&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; readonly CONTENT_TYPE=&amp;#34;Content-Type: application/x-www-form-urlencoded&amp;#34; readonly DATA=&amp;#34;message=${MESSAGE}&amp;#34; # API request curl -X POST -H &amp;#34;${AUTH}&amp;#34; -H &amp;#34;${CONTENT_TYPE}&amp;#34; -d &amp;#34;${DATA}&amp;#34; ${EP} import requests # Configuration token = &amp;#39;mytoken&amp;#39; message = &amp;#39;Hello, LINE Notify!&amp;#39; ep = &amp;#39;https://notify-api.line.me/api/notify&amp;#39; headers = { &amp;#39;Authorization&amp;#39;: f&amp;#39;Bearer {token}&amp;#39;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/x-www-form-urlencoded&amp;#39; } payload = {&amp;#39;message&amp;#39;: message} # API request r = requests.post(ep, headers=headers, data=payload) # Response print(r.</description></item><item><title>FTPファイルアップロードの自動化: サンプルコード #17</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-17-ftp/</link><pubDate>Sun, 06 Aug 2023 13:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-17-ftp/</guid><description>#!/bin/bash # FTP server settings SERVER=&amp;#34;127.0.0.1&amp;#34; PORT=&amp;#34;21&amp;#34; USER=&amp;#34;username&amp;#34; PW=&amp;#34;password&amp;#34; REMOTE_DIR=&amp;#34;/public&amp;#34; # Temporary file TMP_FILE=&amp;#34;tmp&amp;#34; touch $TMP_FILE # FTP command sequence FTP_COMMANDS=$(cat &amp;lt;&amp;lt; EOF open $SERVER $PORT user $USER $PW passive prompt cd $REMOTE_DIR mput $TMP_FILE ls bye EOF ) # Run echo &amp;#34;$FTP_COMMANDS&amp;#34; | ftp -n</description></item><item><title>Bashで引数のハンドルと終了ステータスの取得: サンプルコード #16</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-16-arguments/</link><pubDate>Sun, 06 Aug 2023 13:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-16-arguments/</guid><description>#!/bin/bash if [ &amp;#34;$#&amp;#34; -ne 3 ]; then echo &amp;#39;Error: The script expects exactly 3 arguments.&amp;#39; exit 1 fi echo &amp;#39;The number of args is 3.&amp;#39; echo $1 echo $2 echo $3 echo &amp;#39;Hello, world.&amp;#39; if [ &amp;#34;$?&amp;#34; -eq 0 ]; then echo &amp;#39;Command succeed.&amp;#39; else echo &amp;#39;Command failed.&amp;#39; fi</description></item><item><title>Bashで実行時間を計測: サンプルコード #15</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-15-during/</link><pubDate>Sun, 06 Aug 2023 12:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-15-during/</guid><description>#!/bin/bash BEGIN=$(date +&amp;#39;%s.%3N&amp;#39;) # work sleep 10 END=$(date +&amp;#39;%s.%3N&amp;#39;) DURING=$(echo &amp;#34;scale=3; ${END}- ${BEGIN}&amp;#34; | bc) echo &amp;#34;BEGIN: ${BEGIN}&amp;#34; echo &amp;#34;END: ${END}&amp;#34; echo &amp;#34;DURING: ${DURING}&amp;#34;</description></item></channel></rss>