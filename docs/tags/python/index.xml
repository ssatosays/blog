<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on ssatosays/blog</title><link>https://ssatosays.github.io/blog/tags/python/</link><description>Recent content in Python on ssatosays/blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Aug 2023 15:30:00 +0900</lastBuildDate><atom:link href="https://ssatosays.github.io/blog/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>PythonでSMTPメールを送信する #22</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-22-email/</link><pubDate>Sun, 06 Aug 2023 15:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-22-email/</guid><description>import smtplib from email.mime.text import MIMEText def main(from_email, to_email, smtp_server, port, password): message = &amp;#34;message&amp;#34; mime_text = MIMEText(message, &amp;#34;html&amp;#34;) mime_text[&amp;#34;Subject&amp;#34;] = &amp;#34;subject&amp;#34; mime_text[&amp;#34;From&amp;#34;] = from_email mime_text[&amp;#34;To&amp;#34;] = to_email with smtplib.SMTP(smtp_server, port) as server: server.login(from_email, password) server.send_message(mime_text) if __name__ == &amp;#34;__main__&amp;#34;: from_email, to_email = &amp;#34;&amp;#34;, &amp;#34;&amp;#34; smtp_server, port, password = &amp;#34;&amp;#34;, 587, &amp;#34;&amp;#34; main(from_email, to_email, smtp_server, port, password)</description></item><item><title>Shallow vs Deep Copy #21</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-21-shallow-vs-deepcopy/</link><pubDate>Sun, 06 Aug 2023 15:30:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-21-shallow-vs-deepcopy/</guid><description>import copy orig_dict = { &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;value2&amp;#34;, &amp;#34;key3&amp;#34;: [&amp;#34;value3&amp;#34;, &amp;#34;value4&amp;#34;, &amp;#34;value5&amp;#34;], &amp;#34;key4&amp;#34;: {&amp;#34;subkey&amp;#34;: &amp;#34;subvalue&amp;#34;} } copy_dict = orig_dict orig_dict[&amp;#34;key3&amp;#34;].append(&amp;#34;value6&amp;#34;) print(&amp;#34;orig_dict:&amp;#34;, orig_dict) print(&amp;#34;copy_dict:&amp;#34;, copy_dict) # orig_dict: {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: [&amp;#39;value3&amp;#39;, &amp;#39;value4&amp;#39;, &amp;#39;value5&amp;#39;, &amp;#39;value6&amp;#39;], &amp;#39;key4&amp;#39;: {&amp;#39;subkey&amp;#39;: &amp;#39;subvalue&amp;#39;}} # copy_dict: {&amp;#39;key1&amp;#39;: &amp;#39;value1&amp;#39;, &amp;#39;key2&amp;#39;: &amp;#39;value2&amp;#39;, &amp;#39;key3&amp;#39;: [&amp;#39;value3&amp;#39;, &amp;#39;value4&amp;#39;, &amp;#39;value5&amp;#39;, &amp;#39;value6&amp;#39;], &amp;#39;key4&amp;#39;: {&amp;#39;subkey&amp;#39;: &amp;#39;subvalue&amp;#39;}} import copy orig_dict = { &amp;#34;key1&amp;#34;: &amp;#34;value1&amp;#34;, &amp;#34;key2&amp;#34;: &amp;#34;value2&amp;#34;, &amp;#34;key3&amp;#34;: [&amp;#34;value3&amp;#34;, &amp;#34;value4&amp;#34;, &amp;#34;value5&amp;#34;], &amp;#34;key4&amp;#34;: {&amp;#34;subkey&amp;#34;: &amp;#34;subvalue&amp;#34;} } deep_copy_dict = copy.</description></item><item><title>Pythonでランダム文字列を生成する: サンプルコード #20</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-20-random-strings/</link><pubDate>Sun, 06 Aug 2023 15:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-20-random-strings/</guid><description>import hashlib import os import random import string def generate_random_string(length, chars): return &amp;#39;&amp;#39;.join(random.choice(chars) for _ in range(length)) def func_1(): data = string.digits + string.ascii_lowercase + string.ascii_uppercase return generate_random_string(20, data) def func_2(): result = hashlib.sha256(os.urandom(32)).hexdigest()[:20] return result def func_3(): chars = string.ascii_letters + string.digits + &amp;#39;_&amp;#39; return generate_random_string(20, chars) if __name__ == &amp;#39;__main__&amp;#39;: print(func_1()) print(func_2()) print(func_3())</description></item><item><title>LINE Notify API: サンプルコード #18</title><link>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</link><pubDate>Sun, 06 Aug 2023 14:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/08/06-18-line-notify-api/</guid><description>#!/bin/bash # Configuration readonly TOKEN=&amp;#34;mytoken&amp;#34; readonly MESSAGE=&amp;#34;Hello, LINE Notify!&amp;#34; readonly EP=&amp;#34;https://notify-api.line.me/api/notify&amp;#34; readonly AUTH=&amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; readonly CONTENT_TYPE=&amp;#34;Content-Type: application/x-www-form-urlencoded&amp;#34; readonly DATA=&amp;#34;message=${MESSAGE}&amp;#34; # API request curl -X POST -H &amp;#34;${AUTH}&amp;#34; -H &amp;#34;${CONTENT_TYPE}&amp;#34; -d &amp;#34;${DATA}&amp;#34; ${EP} import requests # Configuration token = &amp;#39;mytoken&amp;#39; message = &amp;#39;Hello, LINE Notify!&amp;#39; ep = &amp;#39;https://notify-api.line.me/api/notify&amp;#39; headers = { &amp;#39;Authorization&amp;#39;: f&amp;#39;Bearer {token}&amp;#39;, &amp;#39;Content-Type&amp;#39;: &amp;#39;application/x-www-form-urlencoded&amp;#39; } payload = {&amp;#39;message&amp;#39;: message} # API request r = requests.post(ep, headers=headers, data=payload) # Response print(r.</description></item><item><title>フィボナッチ数列を取得する #11</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</link><pubDate>Sun, 23 Jul 2023 00:20:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-11-fibonacci/</guid><description>def fibonacci(n: int = 10): fib_list: list = [] if n &amp;lt;= 0: pass elif n == 1: fib_list = [1] elif n == 2: fib_list = [1, 1] else: fib_list = [1, 1] for i in range(2, n): fib_list.append(fib_list[i - 1] + fib_list[i - 2]) return fib_list if __name__ == &amp;#39;__main__&amp;#39;: print(fibonacci(0)) print(fibonacci(1)) print(fibonacci(2)) print(fibonacci(3)) print(fibonacci()) print(fibonacci(20))</description></item><item><title>数値のリストから連続した範囲を抽出する #9</title><link>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</link><pubDate>Sun, 23 Jul 2023 00:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/23-9-ranges/</guid><description>def ranges(numbers): if not numbers: return [] result = [] start = numbers[0] for i, num in enumerate(numbers[1:], 1): if num - numbers[i-1] != 1: result.append(str(start) if start == numbers[i-1] else f&amp;#34;{start}~{numbers[i-1]}&amp;#34;) start = num result.append(str(start) if start == numbers[-1] else f&amp;#34;{start}~{numbers[-1]}&amp;#34;) return result numbers = [1, 2, 3, 4, 5, 8, 9, 10, 12, 13] print(ranges(numbers)) # [&amp;#39;1~5&amp;#39;, &amp;#39;8~10&amp;#39;, &amp;#39;12~13&amp;#39;]</description></item><item><title>List[Tuple]をfilter/lambda関数で抽出する #6</title><link>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</link><pubDate>Sat, 22 Jul 2023 12:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/22-6-filter/</guid><description>&amp;gt;&amp;gt;&amp;gt; tuple_list = [(1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, False), (1, 2, 3, True)] &amp;gt;&amp;gt;&amp;gt; r = list(filter(lambda x: x[3], tuple_list)) &amp;gt;&amp;gt;&amp;gt; print(r) [(1, 2, 3, True)]</description></item><item><title>redis-py: Basic Example #5</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</link><pubDate>Fri, 21 Jul 2023 21:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-5-redis-py/</guid><description>&amp;gt;&amp;gt;&amp;gt; import redis &amp;gt;&amp;gt;&amp;gt; r = redis.Redis(host=&amp;#39;localhost&amp;#39;, port=6379, db=0) &amp;gt;&amp;gt;&amp;gt; r.set(&amp;#39;mykey&amp;#39;, &amp;#39;myvalue&amp;#39;) True &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) myvalue &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; if r.exists(&amp;#39;mykey&amp;#39;): ... r.delete(&amp;#39;mykey&amp;#39;) ... r.exists(&amp;#39;mykey&amp;#39;) ... 1 0 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mykey&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value) None &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 1 &amp;gt;&amp;gt;&amp;gt; r.incr(&amp;#39;mycounter&amp;#39;) 2 &amp;gt;&amp;gt;&amp;gt; value = r.get(&amp;#39;mycounter&amp;#39;) &amp;gt;&amp;gt;&amp;gt; print(value.decode()) 2 &amp;gt;&amp;gt;&amp;gt; r.expire(&amp;#39;mycounter&amp;#39;, 60) True &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 54 &amp;gt;&amp;gt;&amp;gt; r.ttl(&amp;#39;mycounter&amp;#39;) 51 &amp;gt;&amp;gt;&amp;gt;</description></item><item><title>OpenPyXL: サンプルコード #4</title><link>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</link><pubDate>Fri, 21 Jul 2023 20:00:00 +0900</pubDate><guid>https://ssatosays.github.io/blog/posts/2023/07/21-4-openpyxl/</guid><description>from openpyxl import load_workbook filename = &amp;#39;target.xlsx&amp;#39; workbook = load_workbook(filename) worksheet = workbook[&amp;#39;Sheet1&amp;#39;] worksheet[&amp;#39;A1&amp;#39;] = &amp;#39;a&amp;#39; worksheet[&amp;#39;B1&amp;#39;] = &amp;#39;b&amp;#39; worksheet[&amp;#39;C1&amp;#39;] = &amp;#39;c&amp;#39; workbook.save(filename)</description></item></channel></rss>